// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init




generator client {
  provider = "prisma-client-js"
}
//output   = "../src/generated/prisma"
//remove output from generator

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  conversations Conversation[]
  files         File[]          // User can upload files directly
  
  @@map("users")
}

model Conversation {
  id        Int      @id @default(autoincrement())
  title     String?  // Auto-generated or user-set title
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign keys
  userId    Int
  
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  files         File[]          // Files uploaded in this conversation
  messages      Message[]
  documentChunks DocumentChunk[] // All chunks in this conversation
  
  @@index([userId, createdAt])
  @@map("conversations")
}

model File {
  id             Int      @id @default(autoincrement())
  filename       String   // Generated filename for storage
  originalName   String   // User's original filename
  filetype       String   // Mimetype
  fileSize       Int?     // In bytes
  downloadUrl    String   // Firebase URL
  imageUrl       String?  // For thumbnails/previews
  status         FileStatus @default(PROCESSING)
  chunkCount     Int      @default(0) // Total chunks created
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Foreign keys
  userId         Int      // Who uploaded the file
  conversationId Int      // Which conversation this file belongs to
  
  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  chunks         DocumentChunk[]
  
  @@index([userId])
  @@index([conversationId])
  @@map("files")
}

model DocumentChunk {
  id             Int      @id @default(autoincrement())
  chunkIndex     Int      // Order within file (0, 1, 2...)
  text           String   // Actual chunk content
  qdrantId       String   @unique // Pointer to Qdrant point ID
  tokenCount     Int?     // Number of tokens in this chunk
  metadata       Json?    // Page number, section info, etc.
  createdAt      DateTime @default(now())
  
  // Foreign keys
  fileId         Int
  conversationId Int      // For quick conversation-based retrieval
  
  // Relations
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@unique([fileId, chunkIndex]) // Ensure chunk order is unique per file
  @@index([conversationId])      // Fast conversation-based chunk retrieval
  @@index([qdrantId])           // Fast Qdrant ID lookup
  @@map("document_chunks")
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  sender         Sender
  tokenCount     Int?     // For usage tracking
  responseTime   Int?     // Response time in ms (for AI messages)
  contextChunks  String[] // Array of qdrantIds used for this response
  modelUsed      String?  // Which LLM model was used
  createdAt      DateTime @default(now())
  
  // Foreign keys
  conversationId Int
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, createdAt]) // Fast message retrieval for conversations
  @@map("messages")
}

// Enums
enum Sender {
  HUMAN
  AI
}

enum FileStatus {
  PROCESSING  // File uploaded, processing chunks
  COMPLETED   // File processed and ready
  FAILED      // Processing failed
  DELETED     // Soft delete
}